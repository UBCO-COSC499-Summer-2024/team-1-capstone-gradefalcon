version: "3.8"

services:
  backend:
    build:
      args:
        - NODE_ENV=development
      context: backend
      target: development
    command: npm run start-watch

    environment:
      - DATABASE_DB=root
      - DATABASE_USER=root
      - DATABASE_PASSWORD=secret
      - DATABASE_HOST=db
      - NODE_ENV=development
      - JWT_SECRET=secret
      - DATABASE_PORT=5432
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - REACT_APP_AUTH0_DOMAIN=${REACT_APP_AUTH0_DOMAIN}
      - REACT_APP_AUTH0_AUDIENCE=${REACT_APP_AUTH0_AUDIENCE}
      - REACT_APP_AUTH0_CLIENT_ID=${REACT_APP_AUTH0_CLIENT_ID}
      - REACT_APP_AUTH0_CLIENT_SECRET=${REACT_APP_AUTH0_CLIENT_SECRET}
      - REACT_APP_AUTH0_MYAPP=${REACT_APP_AUTH0_MYAPP}
    ports:
      - 80:80
      - 9229:9229
      - 9230:9230
    volumes:
      - ./backend/src:/code/src:ro
      - ./backend/src/assets:/code/src/assets
      - ./backend/package.json:/code/package.json
      - ./backend/package-lock.json:/code/package-lock.json
      - back-notused:/opt/app/node_modules
      - omr-inputs:/code/omr/inputs
      - omr-outputs:/code/omr/outputs
    networks:
      - app-network
    depends_on:
      - db
      - flaskomr

  db:
    container_name: db-postgres
    ports:
      - 5433:5432
    hostname: db
    environment:
      - POSTGRES_DB=root
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=secret
    image: postgres:latest
    volumes:
      - ./db/sql:/docker-entrypoint-initdb.d
    networks:
      - app-network

  frontend:
    build:
      context: frontend
      target: development
    ports:
      - 3000:3000
    volumes:
      - ./frontend/src:/code/src
      - /code/node_modules
    networks:
      - app-network
    depends_on:
      - backend

  flaskomr:
    build:
      context: ./omr # Use the omr directory as the build context
    environment:
      - FLASK_ENV=development
    ports:
      - 5000:5000
    volumes:
      - ./omr:/app
      - omr-inputs:/app/inputs
      - omr-outputs:/app/outputs
    networks:
      - app-network


networks:
  app-network:

volumes:
  back-notused:
  db-data:
  omr-inputs:
  omr-outputs:
